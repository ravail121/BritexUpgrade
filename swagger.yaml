swagger: "2.0"
info:
  description: "BriteX API DOCS."
  version: "1.0.0"
  title: "BriteX"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8000"
basePath: "/api"
tags:
- name: "order"
  description: "Everything about Britex"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"


- name: "plan"
  description: "made a plan"
  externalDocs:
    description: "Find out more "
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
 
 
  /orders:
    get:
      tags:
      - "order"
      summary: "getOrder"
      description: "gets the order index"
      operationId: "getOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "orders found by status"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        400:
          description: "Invalid status "
    
  /orders/{id}:
    get:
      tags:
      - "order"
      summary: "Find order by ID"
      description: "Returns a single pet"
      operationId: "getorderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of order to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "order not found"
      security:
      - api_key: []
  /plans:
    get:
      tags:
      - "plan"
      summary: "madePlan"
      description: "gets the plan index"
      operationId: "getPlan"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "planss found by status"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Plan"
        400:
          description: "Invalid status "
    
  /plans/{id}:
    get:
      tags:
      - "plan"
      summary: "Find plan_id by ID"
      description: "Returns a single pet"
      operationId: "getplanByid"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of plan to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Plan"
        400:
          description: "Invalid ID supplied"
        404:
          description: "plan not found"
      security:
      - api_key: []
      
  /sims:
    get:
      tags:
      - "sim"
      summary: "getSim"
      description: "gets the sim index"
      operationId: "getSim"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "orders found by status"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sim"
        400:
          description: "Invalid status "
    
  /sims/{id}:
    get:
      tags:
      - "sim"
      summary: "Find sim by ID"
      description: "Returns a single sim"
      operationId: "getsimByid"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of sim to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Sim"
        400:
          description: "Invalid ID supplied"
        404:
          description: "sim not found"
      security:
      - api_key: []  
  /addons:
    get:
      tags:
      - "addon"
      summary: "getAddon"
      description: "gets the device index"
      operationId: "getAddon"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "addons found by status"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Addon"
        400:
          description: "Invalid status "
    
  /addons/{id}:
    get:
      tags:
      - "addon"
      summary: "Find addon by ID"
      description: "Returns a single addon"
      operationId: "getaddonByid"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of addon to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Addon"
        400:
          description: "Invalid ID supplied"
        404:
          description: "addon not found"
      security:
      - api_key: []    
  

  /devices:
    get:
      tags:
      - "device"
      summary: "getDevice"
      description: "gets the device index"
      operationId: "getDevice"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "addons found by status"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Addon"
        400:
          description: "Invalid status "
    
  /devices/{id}:
    get:
      tags:
      - "device"
      summary: "Find device by ID"
      description: "Returns a single device"
      operationId: "getdeviceByid"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of device to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Device"
        400:
          description: "Invalid ID supplied"
        404:
          description: "device not found"
      security:
      - api_key: []    
   
securityDefinitions:
  orderstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:orders: "modify pets in your account"
      read:orders: "read your orders"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:  
        type: "integer"
        format: "int64"
      orderId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  
  Plan:
    type: "object"
    properties:
      id:  
        type: "integer"
        format: "int64"
      planId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Plan Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Plan"
      
  Sim:
    type: "object"
    properties:
      id:  
        type: "integer"
        format: "int64"
      simId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Sim Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Sim"
  Addon:
    type: "object"
    properties:
      id:  
        type: "integer"
        format: "int64"
      orderId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Addon Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Addon"
  Device:
    type: "object"
    properties:
      id:  
        type: "integer"
        format: "int64"
      deviceId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Device Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Device"
  
  
 
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"